name: "Terraform Infrastructure Pipeline"

on:
  pull_request:
    branches: [master]
    paths:
      - "**.tf"
      - "**.tfvars"
      - ".github/workflows/terraform.yml"

  push:
    branches: [master]
    paths:
      - "**.tf"
      - "**.tfvars"

env:
  TF_VERSION: "1.6.0"
  # Variables para autenticaci√≥n con Azure
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  # Mapeo expl√≠cito de tu JWT secret
  TF_VAR_jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./ # Cambia si tus .tf est√°n en otra carpeta

    steps:
      # Checkout del c√≥digo
      - name: Checkout
        uses: actions/checkout@v4

      # Setup de Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Terraform Init (backend local)
      - name: Terraform Init
        run: terraform init

      # Terraform Format Check
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      # Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # Terraform Plan
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -no-color
        continue-on-error: false

      # Comentar el plan en el PR
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Obtener el output del plan
            const planOutput = execSync('terraform show -no-color tfplan', { encoding: 'utf8' });

            const output = `#### Terraform Plan üìñ

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      # Terraform Apply (solo en push a main)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      # Cleanup
      - name: Cleanup
        if: always()
        run: rm -f tfplan
